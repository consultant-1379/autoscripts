#!/bin/bash

ROOT_DIR=`dirname $0`
ROOT_DIR=`cd ${ROOT_DIR} ; cd ../.. ; pwd`

while getopts  "v:c:h:n:s:d:p:t:f:" flag
do
    case "$flag" in
        v) VAPP="${OPTARG}";;
	c) CLUST="${OPTARG}";;
	h) HOST="${OPTARG}";;
	n) PRIV_NET="${OPTARG}";;
	p) PUB_NET="${OPTARG}";;
        s) VSPC="${OPTARG}";;
	d) DATASTORE="${OPTARG}";;
	t) TEMPLATE_MAP="${OPTARG}";;
        f) FOLDER="${OPTARG}";;
        *) 
           echo "ERROR: Unknown option $flag"
	   exit 1
	   ;;

    esac
done

for VAR_NAME in VAPP CLUST HOST PRIV_NET PUB_NET VSPC DATASTORE TEMPLATE_MAP ; do
    VAR_VALUE=`eval echo \\$${VAR_NAME}`
    if [ -z "${VAR_VALUE}" ] ; then
	echo "No value for ${VAR_NAME}"
	cat <<EOF 
Usage: $0 -v <vAppName> -c <ClusterName> -h <HostInCluster> 
          -n <vAppNetwork> -p <PublicNetwork> 
          -s <vSPC_Host> -d <DataStore> -t <TemplateMapFile>
          [-f folderPath]
EOF
	exit 1
    fi
done

FOLDER_OPT=""
if [ "${FOLDER}" ] ; then
    FOLDER_OPT="--folder ${FOLDER}"
fi

${ROOT_DIR}/vm/vApp.pl --vapp ${VAPP} --op create --cluster "${CLUST}" ${FOLDER_OPT}
if [ $? -ne 0 ] ; then
    echo "ERROR: Create vApp failed"
    exit 1
fi	

VM_LIST=""
for VM_PARAM in gateway:1:120:1 netsim:2:120:2 omsas:2:300:3 omsrvm:2:300:4 omsrvs:2:300:7 ossmaster:3:900:5 uas1:4:300:6 nedss:2:300:8 ebas:4:300:9 ; do    
    VM_INDEX=`expr ${VM_INDEX} + 1`

    SHORT_NAME=`echo "${VM_PARAM}" | awk -F: '{print $1}'`
    START_ORDER=`echo "${VM_PARAM}" | awk -F: '{print $2}'`
    STOP_DELAY=`echo "${VM_PARAM}" | awk -F: '{print $3}'`
    MAC_OCTET=`echo "${VM_PARAM}" | awk -F: '{print $4}'`

    PRIV_NIC=1
    if [ "${SHORT_NAME}" = "gateway" ] ; then
	PRIV_NIC=2
    fi

    VM="${VAPP}_${SHORT_NAME}"
    MAC=`printf "00:50:56:00:00:%02X" ${MAC_OCTET}`

    SRC_VM=`egrep "^${SHORT_NAME}:" ${TEMPLATE_MAP} | awk -F: '{print $2}'`

    if [ ! -z "${SRC_VM}" ] ; then
	echo "${VM} ${MAC} ${START_ORDER}:${STOP_DELAY}s vnic${PRIV_NIC}"
	VM_LIST="${VM_LIST} ${VM}"
	echo " Cloning from ${SRC_VM}"
	/usr/share/doc/vmware-vcli/samples/vm/vmprovision.pl --operation clone --vmhost ${HOST} \
	    --vmhost_destination ${HOST} --vmname ${SRC_VM} --vmname_destination ${VM} \
	    --datastore "${DATASTORE}"
	if [ $? -ne 0 ] ; then
            echo "ERROR: Clone failed"
            exit 1
	fi	
	
        #
        # Add to vApp and set start order
        #
	echo " Add to vApp"
	${ROOT_DIR}/vm/vApp.pl --vapp ${VAPP} --op addvm --vm ${VM}
	echo " Set vApp start/stop parameters"
	${ROOT_DIR}/vm/vApp.pl --vapp ${VAPP} --op order --vm ${VM} --startorder ${START_ORDER} --stopdelay ${STOP_DELAY}

	#
	# Connect to private network
	#
	echo " Connect vnic${PRIV_NIC} to ${PRIV_NET}"
	${ROOT_DIR}/vm/connectNIC.pl --vmname ${VM} --pg ${PRIV_NET} --vnic ${PRIV_NIC}
	if [ $? -ne 0 ] ; then
            echo "ERROR: connectNIC.pl failed"
            exit 1
	fi

        #
        # Update NIC MAC 
        #	
	SET_MAC=`egrep "^${SHORT_NAME}:" ${TEMPLATE_MAP} | awk -F: '{print $4}'`
	if [ "${SET_MAC}" = "yes" ] ; then
	    echo " Set MAC address for ${PRIV_NIC} to ${MAC}"
	    ${ROOT_DIR}/vm/vmNICManagement.pl --vmname ${VM} --vnic ${PRIV_NIC} --operation updatemac --mac ${MAC}
	    if [ $? -ne 0 ] ; then
		echo "ERROR: MAC update failed"
            exit 1
	    fi
	fi

        #
        # Setup serial console
        #
	HAS_SERIAL_PORT=`egrep "^${SHORT_NAME}:" ${TEMPLATE_MAP} | awk -F: '{print $3}'`
	if [ "${HAS_SERIAL_PORT}" = "yes" ] ; then
	    echo " Add serial port"
	    ${ROOT_DIR}/vm/serial.pl --op add --vmname ${VM} --vspc ${VSPC}
	fi		
    else
	echo " No template, skipping"
    fi	
done

echo "Connect gateway to ${PUB_NET}"
${ROOT_DIR}/vm/connectNIC.pl --vmname ${VAPP}_gateway --pg ${PUB_NET} --vnic 1 

MODIFY_MASTER=`egrep "^ossmaster:" ${TEMPLATE_MAP} | awk -F: '{print $4}'`
if [ "${MODIFY_MASTER}" = "yes" ] ; then
    echo "Modifing ossmaster VM"
    ${ROOT_DIR}/vm/updateVmCpuMem.pl --vmname ${VAPP}_ossmaster --mem 65536 --cpu 4
    ${ROOT_DIR}/vm/addDisk.pl --vmname ${VAPP}_ossmaster --size 250 --bus 1 --unit 0 --type thin
fi

MODIFY_OMSRVM=`egrep "^omsrvm:" ${TEMPLATE_MAP} | awk -F: '{print $4}'`
if [ "${MODIFY_OMSRVM}" = "yes" ] ; then
    echo "Modifing omsrvm VM"
    ${ROOT_DIR}/vm/addDisk.pl --vmname ${VAPP}_omsrvm --size 72 --bus 0 --unit 1 --type thin
fi

MODIFY_NEDSS=`egrep "^nedss:" ${TEMPLATE_MAP} | awk -F: '{print $4}'`
if [ "${MODIFY_NEDSS}" = "yes" ] ; then
    echo "Modifing nedss VM"
    ${ROOT_DIR}/vm/addDisk.pl --vmname ${VAPP}_nedss --size 72 --bus 0 --unit 1 --type thin
fi

echo "Create coloc rules"
${ROOT_DIR}/vm/vApp.pl --vapp ${VAPP} --op coloc
echo "Set name variables"
${ROOT_DIR}/vm/vApp.pl --vapp ${VAPP} --op setnamevar


